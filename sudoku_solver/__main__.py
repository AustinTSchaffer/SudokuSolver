BEGINNER = [
    [0, 4, 2, 3, 0, 1, 7, 0, 0],
    [0, 0, 7, 9, 5, 6, 4, 2, 8],
    [5, 6, 0, 7, 2, 4, 0, 1, 0],
    [8, 9, 0, 0, 4, 0, 0, 0, 7],
    [2, 0, 0, 6, 9, 7, 0, 8, 3],
    [1, 7, 6, 2, 0, 8, 9, 4, 5],
    [0, 8, 9, 5, 1, 2, 6, 3, 4],
    [4, 3, 1, 8, 0, 0, 0, 7, 2],
    [6, 2, 5, 4, 0, 3, 8, 0, 1],
]

EASY = [
    [4, 5, 9, 1, 7, 3, 2, 8, 6],
    [3, 0, 1, 6, 8, 0, 0, 0, 0],
    [0, 0, 6, 5, 0, 9, 0, 0, 1],
    [6, 3, 4, 2, 9, 0, 5, 7, 0],
    [5, 0, 0, 8, 0, 0, 3, 0, 0],
    [8, 1, 7, 0, 0, 4, 6, 0, 0],
    [1, 4, 0, 7, 3, 6, 0, 0, 9],
    [0, 0, 0, 9, 0, 5, 0, 0, 0],
    [0, 6, 3, 0, 0, 0, 1, 0, 7],
]

MEDIUM = [
    [5, 6, 1, 3, 0, 0, 0, 0, 2],
    [0, 3, 0, 5, 9, 6, 0, 1, 0],
    [0, 7, 0, 0, 0, 2, 3, 0, 0],
    [0, 5, 9, 0, 6, 0, 0, 0, 0],
    [6, 8, 0, 0, 0, 5, 0, 3, 1],
    [0, 0, 4, 0, 0, 9, 0, 0, 0],
    [0, 0, 3, 6, 1, 0, 0, 0, 7],
    [0, 0, 6, 0, 5, 0, 2, 0, 3],
    [7, 0, 0, 0, 0, 0, 1, 0, 0],
]

HARD = [
    [0, 9, 4, 0, 0, 8, 0, 0, 7],
    [0, 0, 6, 5, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 4, 0, 2, 5],
    [7, 0, 0, 0, 0, 3, 0, 0, 8],
    [0, 0, 0, 0, 9, 1, 0, 7, 0],
    [0, 4, 0, 0, 0, 0, 9, 0, 6],
    [0, 8, 3, 4, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 6, 0, 0, 0, 0, 8, 0, 0],
]

EXTREME = [
    [0, 0, 9, 0, 0, 7, 0, 4, 0],
    [0, 7, 1, 0, 2, 0, 0, 0, 5],
    [0, 4, 0, 0, 0, 0, 0, 3, 9],
    [0, 0, 0, 0, 0, 8, 0, 0, 0],
    [0, 0, 0, 4, 6, 0, 0, 0, 0],
    [0, 0, 2, 1, 9, 0, 8, 0, 0],
    [0, 6, 0, 0, 0, 0, 4, 0, 0],
    [0, 9, 0, 2, 8, 6, 5, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
]

AMBIGUOUS_1 = [
    [0] * 9,
    [0] * 9,
    [0] * 9,
    [0] * 9,
    ([0] * 4) + [1] + ([0] * 4),
    [0] * 9,
    [0] * 9,
    [0] * 9,
    [0] * 9,
]

AMBIGUOUS_2 = [
    [1, 0, 0, 0, 0, 0, 0, 0, 0, ],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, ],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, ],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, ],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, ],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, ],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, ],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, ],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, ],
]

CONFLICT = [
    [0, 0, 9, 0, 0, 7, 0, 4, 0],
    [0, 7, 1, 0, 2, 0, 0, 0, 5],
    [0, 4, 0, 0, 0, 0, 0, 3, 9],
    [0, 0, 0, 0, 0, 8, 0, 0, 0],
    [0, 0, 0, 4, 6, 0, 0, 0, 0],
    [0, 0, 2, 1, 9, 0, 8, 0, 0],
    [0, 6, 0, 0, 0, 0, 4, 0, 0],
    [0, 9, 0, 2, 8, 6, 5, 1, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
]

PENCILMARK_ONLY_INIT_GRID = [[0] * 9] * 9

PENCILMARK_ONLY_GRIDS = [
    [
        [  "12459",      "259",     "2345679",   "2356789",   "12345679",  "1245789",   "1245679",     "257",       "2357",   ],
        [   "459",     "12346789",   "123589",    "234569",    "12345",     "124567",    "123578",   "12345679",    "567",    ],
        [ "2345789",    "145679",     "168",     "1245789",     "258",     "2356789",     "348",      "345679",   "1256789",  ],
        [ "3456789",    "245789",   "1234569",   "23456789",    "579",     "12456789",   "123567",    "256789",   "1456789",  ],
        [ "12345789",   "124578",     "456",       "359",       "1379",      "157",       "456",      "235689",   "12356789", ],
        [ "1234569",    "123458",   "3456789",   "12345689",    "135",     "12345678",  "1456789",    "123568",   "1234567",  ],
        [  "134589",    "134567",     "267",     "1234578",     "258",     "1235689",     "249",      "134569",   "1235678",  ],
        [    "34",    "123456789",   "235789",    "345689",    "456789",    "145678",    "125789",  "123456789",    "156",    ],
        [  "34578",      "358",      "14569",     "235689",   "13456789",   "234578",   "1345678",     "158",      "15689",   ],
    ],
    [
        [  "136789",     "1259",     "123569",   "1235689",   "1235789",   "1234578",    "123457",     "2357",     "134789",  ],
        [   "1459",   "123456789",   "123589",    "25679",      "1235",     "24579",     "123578",  "123456789",    "3567",   ],
        [  "145789",    "145679",   "1234579",     "2489",    "12346789",    "2678",     "235679",    "345679",    "356789",  ],
        [ "1456789",    "34589",      "2469",    "23456789",   "13579",    "12456789",    "2467",     "15678",    "3456789",  ],
        [ "1345679",     "1457",    "12346789",   "13579",    "12346789",   "13579",     "123478",     "569",     "1345679",  ],
        [ "1234567",    "23459",      "3468",    "12345689",   "13579",    "12345678",    "1468",     "12567",    "1234569",  ],
        [  "123457",    "134567",   "1345789",     "2348",    "12346789",    "1268",    "1356789",    "134569",    "123569",  ],
        [   "3457",    "13456789",   "235789",    "13568",      "5789",     "13458",     "125789",  "123456789",    "1569",   ],
        [  "123679",     "3578",     "356789",   "2356789",   "1235789",   "1245789",    "145789",     "1589",     "123479",  ],
    ]
]


SAMPLE_STARTING_POSITIONS = [
    ("Ambiguous", AMBIGUOUS_1),
    ("Ambiguous", AMBIGUOUS_2),
    ("Beginner", BEGINNER),
    ("Easy", EASY),
    ("Medium", MEDIUM),
    ("Hard", HARD),
    ("Extreme", EXTREME),
    ("Extreme plus Conflict", CONFLICT),
]

import sudoku_solver

def main():
    for (SP_RANK, SP) in SAMPLE_STARTING_POSITIONS:
        sudoku = sudoku_solver.sudoku.SudokuPuzzle(SP)

        print("{} Starting Position:".format(SP_RANK))
        print(sudoku)

        sudoku, state = sudoku_solver.cnpp_solver.solve(sudoku)

        print(f"Puzzle State: {state.name}")
        print(sudoku)

    for index, PMOGRID in enumerate(PENCILMARK_ONLY_GRIDS, 1):
        print(f"Solving Pencil-Mark Only Grid: {index}")

        sudoku = sudoku_solver.sudoku.SudokuPuzzle(PENCILMARK_ONLY_INIT_GRID)

        for row_index, row in enumerate(PMOGRID):
            for col_index, pencilmarks in enumerate(row):
                cell = sudoku.get_cell((row_index, col_index))
                cell._potential_values = {
                    int(char) for char in pencilmarks
                }

        sudoku, state = sudoku_solver.cnpp_solver.solve(sudoku)

        print(f"Puzzle State: {state.name}")
        print(sudoku)

if __name__ == "__main__":
    main()
